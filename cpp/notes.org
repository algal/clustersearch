

* todo

** TODO implement func for doing runs and calculating stats

   Boost accumulators can calculate mean and variance incrementally.
   faster to do calculate on complete results of run?
** TODO setup logging macro or boost logging
** move PRINT support into other file
** perf possibilities

   need to configure alphabetsize and string size at runtime.

*** alternative representations for geno

   Issues: std::string dynamically allocates storage.
   - calls to malloc slower than stack allocation
   - indirection required for every lookup

   Issues: std::string optimized for alphabetsize =256 (extended ASCII).
   - fatter representation, more copying, worse caching

    uint (interpret string as number where base=alphabetsize)?
    short[]
    char[]
    basic_string<customCharT>
      where CustomType in {enum with alphabetsize elements}

*** std::string::reserve() to hint runtime to free excess memory

*** optimizations of mut()

   instead of generating alternative alphabet letters, do lookup from
   static table?

   instead of building adding mutants incrementally, create whole
   block of original string with 
   vector<string>( (alphabetsize-1)*(length), geno)
   and then mutate thee chars individually?
   (requires ability to mutate vector's elems, rather than copy them.)
   
  Issues: generation of mutants also needs to be fast.
   - possibly SLOWER with representation as a unit
     - 
 


*** recompile with libc++

    http://developer.apple.com/library/mac/#documentation/CompilerTools/Conceptual/index.html



* notes on performance

** Python outperforming CPP.

   unclear why.

   CPP mut() function faster than python mut() function

   Python search() faster than cpp() search.

***   tried switching mut() to return list<geno> instead of set<geno>.

      broke set_difference

***   tried extracting a key collection insted of using transform_iterator.

      same correct result. killed performance.

*** profiling suggests that cpp version may be spending a lot of time creating/destroying strings.

*** maybe b/c cpp map is a tree, and python map is a hashtable?

