

* todo

** TODO implement func for calculating stats over multiple runs

   Boost accumulators can calculate mean and variance incrementally.
   faster to do calculate on complete results of run?

** TODO setup logging macro or boost logging

*** ezlogger?
    http://axter.com/ezlogger/

** DONE implement func for doing runs 

** DONE better randomness

   switch to <tr1/random>
   verify re-seeding works as expected thru python library.
   http://www.boost.org/doc/libs/1_39_0/libs/random/index.html

   tried. but performance slower.
** TODO lookinto perf possibilities

   need to configure alphabetsize and string size at runtime.

*** intertwingle search() and calculate_measures()

    with rolling all operations into one loop

    instead of re-iterating thru the map to calc stats, should just
    calc stats as the search goes

    so instead of building one map observed, build two: cluster and
    perimeter. and keep a running count of their size.

*** DONE replace set_difference 

    with nonconsing versions.

*** alternative representations for geno

   Issues: std::string dynamically allocates storage.
   - calls to malloc slower than stack allocation
   - indirection required for every lookup

   Issues: std::string optimized for alphabetsize =256 (extended ASCII).
   - fatter representation, more copying, worse caching

    uint (interpret string as number where base=alphabetsize)?
    short[]
    char[]
    basic_string<customCharT>
      where CustomType in {enum with alphabetsize elements}

*** std::string::reserve() to hint runtime to free excess memory

*** optimizations of mut()

   instead of generating alternative alphabet letters, do lookup from
   static table?

   instead of building adding mutants incrementally, create whole
   block of original string with 
   vector<string>( (alphabetsize-1)*(length), geno)
   and then mutate thee chars individually?
   (requires ability to mutate vector's elems, rather than copy them.)
   
  Issues: generation of mutants also needs to be fast.
   - possibly SLOWER with representation as a unit
     - 
 


*** recompile with libc++

    http://developer.apple.com/library/mac/#documentation/CompilerTools/Conceptual/index.html


    performance ranking:
    clang++, compiling libstdcxx-gcc4.2, with boost::tr1::unordered_map
    clang++, compiling libstdcxx-gcc4.2, with stdcxx-gcc4.2 unordered_map
    clang++ compiling libc++
    clang++ compiling libc++ with std=c++0x gives errors

    clang++ beats g++4.2

*** boost::tr1::unordered_map outperforming gcc-4.2/unordered_map

*** tuned hashing function for unordered_map

*** better unordered_map or unordered_set

    use djb's cribit?
    http://www.imperialviolet.org/binary/critbit.pdf

*** replace std::string with something customized?
compile with std=c++0x to ensure return value optimization
