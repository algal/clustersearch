

* todo

** TODO implement func for calculating stats

   Boost accumulators can calculate mean and variance incrementally.
   faster to do calculate on complete results of run?
** TODO setup logging macro or boost logging
** DONE implement func for doing runs 
** DONE move PRINT support into other file
** TODO lookinto perf possibilities

   need to configure alphabetsize and string size at runtime.

*** alternative representations for geno

   Issues: std::string dynamically allocates storage.
   - calls to malloc slower than stack allocation
   - indirection required for every lookup

   Issues: std::string optimized for alphabetsize =256 (extended ASCII).
   - fatter representation, more copying, worse caching

    uint (interpret string as number where base=alphabetsize)?
    short[]
    char[]
    basic_string<customCharT>
      where CustomType in {enum with alphabetsize elements}

*** std::string::reserve() to hint runtime to free excess memory

*** optimizations of mut()

   instead of generating alternative alphabet letters, do lookup from
   static table?

   instead of building adding mutants incrementally, create whole
   block of original string with 
   vector<string>( (alphabetsize-1)*(length), geno)
   and then mutate thee chars individually?
   (requires ability to mutate vector's elems, rather than copy them.)
   
  Issues: generation of mutants also needs to be fast.
   - possibly SLOWER with representation as a unit
     - 
 


*** recompile with libc++

    http://developer.apple.com/library/mac/#documentation/CompilerTools/Conceptual/index.html


    performance ranking:
    clang++, compiling libstdcxx-gcc4.2, with boost::tr1::unordered_map
    clang++, compiling libstdcxx-gcc4.2, with stdcxx-gcc4.2 unordered_map
    clang++ compiling libc++
    clang++ compiling libc++ with std=c++0x gives errors

    clang++ beats g++4.2

*** boost::tr1::unordered_map outperforming gcc-4.2/unordered_map

*** tuned hashing function for unordered_map



