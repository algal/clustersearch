cmake_minimum_required(VERSION 2.8.1)

#cmake search paths

if(TRUE) # macports
  set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /opt/local/lib)
  set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} /opt/local/include)
  message("CMAKE_LIBRARY_PATH=${CMAKE_LIBRARY_PATH}")
  message("CMAKE_INCLUDE_PATH=${CMAKE_INCLUDE_PATH}")
endif()

#### compiler toolchain
set(CMAKE_C_COMPILER "/usr/bin/clang")
set(CMAKE_CXX_COMPILER "/usr/bin/clang++")

#set(CMAKE_C_COMPILER "/sw/bin/gcc-fsf-4.5")
#set(CMAKE_CXX_COMPILER "/sw/bin/c++-fsf-4.5")

#set(CMAKE_C_COMPILER "gcc")
#set(CMAKE_CXX_COMPILER "g++")

#### system description

#### project description

project(CLUSTERSEARCH)

#set(CMAKE_BUILD_TYPE Release) # generic optimization
set(CMAKE_CXX_FLAGS "-O4") # clang super-optimization

#### external libraries to use

find_package(Boost 1.41.0 REQUIRED)
message("Boost_LIBRARY_DIRS=${Boost_LIBRARY_DIRS}")
message("Boost_INCLUDE_DIR=${Boost_INCLUDE_DIR}")

find_library(BOOST_PROGRAM_OPTIONS_LIBRARY NAMES libboost_program_options.dylib)
message("BOOST_PROGRAM_OPTIONS_LIBRARY=${BOOST_PROGRAM_OPTIONS_LIBRARY}")

include_directories(${Boost_INCLUDE_DIR})

# libraries to build
add_library(clustersearch SHARED clustersearch.cpp)
target_link_libraries(clustersearch ${BOOST_PROGRAM_OPTIONS_LIBRARY})

# executables to build
add_executable(clusters clustersearch.cpp printable.hpp)
target_link_libraries(clusters ${BOOST_PROGRAM_OPTIONS_LIBRARY})

#####
##### Instructions
#####
# 0. ls CmakeLists.txt = true
# 1. mkdir build
# 2. cd build
# 3. cmake ..
# 4. make
